This is a partial revert of the upstream 

commit b461531a9bba8e87785d511bddc500f2a5a916fc
Author: Eugene Tarassov <eugene.tarassov@xilinx.com>
Date:   Wed Mar 25 18:25:04 2015 -0700

    TCF Server: fixed symbols server support of stepping over inlined functions

==
The issue is that upon launching a linux process on a 32 bit x86 or arm
target the agent will crash.  Example of a manual launch:

/usr/sbin/device -L- -l0x58 -i 'WSS:128.224.74.23:443;GetUrl=/ws/8002;ID=trial1_50359261-af69-4ab1-9ae6-be7e078b90e9'
> Connection with Device Manager has been established
TCF 16:43:47.508: context: attaching pid 489
TCF 16:43:47.529: event: pid 489 stopped, signal 5, event none
TCF 16:43:47.574: event: new context 0x105b38, id P489.489
TCF 16:43:47.577: context: temporary suspending ctx 0x105b38 id P489.489
TCF 16:43:47.597: event: pid 489 stopped at PC = 0x438f8a00
TCF 16:43:47.968: context: read memory ctx 0x1051a0, id P489, address 0x87ec, size 4
TCF 16:43:47.972: context: write memory ctx 0x1051a0, id P489, address 0x87ec, size 4
TCF 16:43:47.978: context: resuming ctx 0x105b38, id P489.489, with signal 0
TCF 16:43:47.983: event: pid 489 stopped, signal 19, event none
TCF 16:43:47.985: event: pid 489 stopped at PC = 0x438f8a00
TCF 16:43:47.986: context: resuming ctx 0x105b38, id P489.489, with signal 0
TCF 16:43:48.028: event: pid 489 stopped, signal 5, event none
TCF 16:43:48.030: event: pid 489 stopped at PC = 0x87ec
TCF 16:44:06.598: context: read memory ctx 0x1051a0, id P489, address 0x87ec, size 4
TCF 16:44:06.601: context: write memory ctx 0x1051a0, id P489, address 0x87ec, size 4
TCF 16:44:07.260: context: detach ctx 0x1051a0, id P489
TCF 16:44:22.615: Stalled cache at ../../agent/tcf/services/symbols_proxy.c:1958


---
 agent/tcf/services/symbols_proxy.c |   10 +---------
 1 file changed, 1 insertion(+), 9 deletions(-)

--- a/agent/tcf/services/symbols_proxy.c
+++ b/agent/tcf/services/symbols_proxy.c
@@ -1941,15 +1941,7 @@ int get_stack_tracing_info(Context * ctx
         context_lock(f->ctx = ctx);
         f->magic = MAGIC_FRAME;
         f->ip = ip;
-        if (syms->no_find_frame_props) {
-            /* Deprecated, use findFrameProps */
-            f->pending = protocol_send_command(c, SYMBOLS, "findFrameInfo", validate_frame, f);
-            f->command_props = 0;
-        }
-        else {
-            f->pending = protocol_send_command(c, SYMBOLS, "findFrameProps", validate_frame, f);
-            f->command_props = 1;
-        }
+        f->pending = protocol_send_command(c, SYMBOLS, "findFrameInfo", validate_frame, f);
         json_write_string(&c->out, f->ctx->id);
         write_stream(&c->out, 0);
         json_write_uint64(&c->out, ip);
